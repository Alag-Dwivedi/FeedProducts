# SQL Test Assignment

Attached is a mysqldump of a database to be used during the test.

Below are the questions for this test. Please enter a full, complete, working SQL statement under each question. We do not want the answer to the question. We want the SQL command to derive the answer. We will copy/paste these commands to test the validity of the answer.

**Example:**

_Q. Select all users_

- Please return at least first_name and last_name

SELECT first_name, last_name FROM users;


------

**— Test Starts Here —**

1. Select users whose id is either 3,2 or 4
- Please return at least: all user fields
- SELECT id, first_name, last_name, email, status,created FROM users where id = 2 or id = 3 or id = 4;

2. Count how many basic and premium listings each active user has
- Please return at least: first_name, last_name, basic, premium
-   Select users.first_name, users.last_name, count(listings.status = 2) as basicListing,
    count(listings.status = 3)  as premiumlisting
    from users
    join listings
    on users.id = listings.user_id
    where users.status != 1
    group by users.id;


3. Show the same count as before but only if they have at least ONE premium listing
- Please return at least: first_name, last_name, basic, premium
-   Select users.first_name, users.last_name,
    count(listings.status = 2) as basicListing,
    count(listings.status = 3)  as premiumlisting
    from users
    join listings
    on users.id = listings.user_id
    where users.status != 1
    group by users.id
    having premiumlisting > 0;


4. How much revenue has each active vendor made in 2013
- Please return at least: first_name, last_name, currency, revenue
-   select users.first_name, users.last_name, clicks.currency, sum(clicks.price) as revenue
    from users
    join listings
    on users.id = listings.user_id
    join clicks on clicks.listing_id = listings.id
    where year(clicks.created) = 2013 and users.status != 1
    group by users.id;


5. Insert a new click for listing id 3, at $4.00
- Find out the id of this new click. Please return at least: id
-   insert into clicks (listing_id, price, currency, created)
    values(3, 4.00, "USD", CURDATE());
    select LAST_INSERT_ID();


6. Show listings that have not received a click in 2013
- Please return at least: listing_name
-   with cte as(
    select listings.id, listings.name from listings
    join clicks
    on clicks.listing_id = listings.id
    where year(clicks.created) = 2013
    group by listings.name)
    select listings.name from listings where id not in (select id from cte);


7. For each year show number of listings clicked and number of vendors who owned these listings
- Please return at least: date, total_listings_clicked, total_vendors_affected
-   select year(clicks.created) as date, count(clicks.listing_id) as total_listings_clicked,
    count(users.id) as total_vendors_affected from clicks
    join listings
    on listings.id = clicks.listing_id
    join users on users.id = listings.user_id
    group by year(clicks.created);


8. Return a comma separated string of listing names for all active vendors
- Please return at least: first_name, last_name, listing_names
 -  select users.first_name, users.last_name, group_concat(listings.name separator ', ') as listing from users
    join listings
    on users.id = listings.user_id
    where users.status != 1
    group by users.id;
